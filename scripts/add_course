#!/usr/bin/env ruby

require 'rubygems'
require 'yaml'
require 'builder'
#require 'clip'

class AddCourse
  CMDS = ["create", "index", "sync"]

  def initialize
    verify_nanoc_dir()
    @config = YAML.load_file("config.yaml")
    @course_top_dir = "content/course-materials"
  end

USAGE = <<EOF
Usage: #{$0} COMMAND DIR

COMMAND can be one of:

  create
      Create course content template directory named DIR in
      the current working directory.

  index
      Add course to courses list and create a course index content
      page.  This modifies and creates files within the site's content
      directory.  Uses template file and file structure found in DIR
      to create the index.

  sync
      Performs an rsync of DIR to live bioconductor.org webserver.

DIR
    Name of the course in the format suitable for use as directory
    name and URL path element.


EOF

COURSE_YAML = <<EOF
layout: course
title:
  The title of the course goes here
start_date: 2010-01-27
end_date: 2010-01-29
instructors: ["T. Cher", "Prof S. Or"]
location: "Seattle, USA"
url: COURSE_URL_HERE
tags: ["intro", "seattle", "package"]
description:
  You can put some description text here.
  Must be indented.
EOF

  def create(name)
    if File.exist?(name)
      $stderr.puts "#{name} already exists, aborting"
      exit 1
    end
    FileUtils.mkdir(name)
    config = "#{name}/course_config.yaml"
    open(config, "w") do |f|
      f.write(COURSE_YAML)
    end
    puts "Course directory created at: #{name}"
    puts "NEXT STEPS:"
    puts "    - edit #{config}"
    puts "    - run ./scripts/add_course index #{name}"
  end

  def index(name)
    # FIXME: test name for exist and yaml file too
    # FIXME: useful output if no files created (empty course dir)
    course = YAML.load_file("#{name}/course_config.yaml")
    make_index_files(name, course)
    # FIXME: copy assets to output (rsync?)
  end

  def create_file_index(dir, excludes = [])
    # TODO: could set a class based on whether item is
    # a file or a directory.  For files we could compute size
    # and directories possibly number of items inside.
    adir = File.expand_path(dir)
    xm = Builder::XmlMarkup.new(:indent => 2, :margin => 8)
    content = xm.ul("class" => "file_list") {
      Dir.chdir(adir) do
        Dir["*"].each do |f|
          next if excludes.member?(f)
          # For the benefit of the preview webserver
          # we append a trailing slash to directories
          # otherwise the dir/index.html is not found.
          if File.directory?("#{adir}/#{f}")
            f += "/"
          end
          xm.li { xm.a(f, "href" => "#{f}") }
        end
      end
    }.to_s
    attrs = {
      "title" => "#{File.basename(adir)}",
      "created_at" => Time.now.to_s,
      "autogenerated" => "true"
    }
    { :content => content, :attrs => attrs }
  end

  def course_year(course)
    # FIXME: should we parse into a Time to verify
    # what's in the file and extract year?
    course["start_date"].year.to_s
  end

  def autogenerated?(f)
    attrs = YAML.load_file(f)
    k = "autogenerated"
    (attrs.has_key?(k) && attrs[k].downcase != "false")
  end

  def write_content(base, data)
    dest_html = "#{base}.html"
    dest_yaml = "#{base}.yaml"
    FileUtils.mkdir_p(File.dirname(dest_html))
    open(dest_html, "w") { |fh| fh.write(data[:content]) }
    open(dest_yaml, "w") { |fh| fh.write(data[:attrs].to_yaml) }
    p = base.sub(/.*\/content\/(.*$)/, "\\1")
    puts "CREATED: #{p} (.html, .yaml)"
  end

  def make_index_files(input, course)
    indir = File.expand_path(input)
    outdir = File.expand_path(@course_top_dir + "/#{course_year(course)}")
    course_out_dir = "#{outdir}/#{File.basename(indir)}"
    top = create_file_index(indir, ["course_config.yaml"])
    top[:attrs] = top[:attrs].merge(course)
    write_content(course_out_dir, top)
    Dir.chdir(input) do
      Dir["**/"].each do |d|
        d = d.sub(/\/$/, "")
        dest_yaml = "#{course_out_dir}/#{d}.yaml"
        if !File.exists?(dest_yaml) || autogenerated?(dest_yaml)
          write_content("#{course_out_dir}/#{d}", create_file_index(d))
        end
      end
    end
  end

  def verify_nanoc_dir
    must_have = ["content", "layouts", "lib"]
    all_there = must_have.map { |d| File.directory? d }.reduce(:&)
    if (!all_there)
      $stderr.puts("Current directory does not look like site root.  " +
                   "Expecting to find:")
      $stderr.puts(must_have.join(", "))
      exit 1
    end
    if !(File.directory?("output"))
      $stderr.puts("Please run 'rake' to compile the site before running" +
                   " this script")
      exit 1
    end
  end

  def verify_args(cmd, course_dir)
    if (!cmd || !CMDS.member?(cmd))
      $stderr.puts USAGE
      msg = cmd ? "unknown COMMAND: #{cmd}" : "missing COMMAND"
      $stderr.puts msg
      exit 1
    end

    if !course_dir
      $stderr.puts USAGE
      $stderr.puts "missing DIR" if !course_dir
      exit 1
    end
  end

  def run(args)
    verify_nanoc_dir()
    cmd = args[0]
    course_dir = args[1]
    verify_args(cmd, course_dir)
    self.send(cmd.to_sym, course_dir)
  end
end


adder = AddCourse.new
adder.run(ARGV)


